
カタログのシステムを構成する技術一覧
開発用
分類        技術名        理由
言語        Kotlin 1.2.0        Javaより簡潔なコードが書け、Spring FWなどのJava資産が活用でき、学習コストが高くないため
アプリケーションFW        Spring Boot 2        Spring 5からKotlin対応が入っているので、5がベースとなっているBootを選択した
Web FW        Spring WebFlux        大量のリクエストをさばけるReactiveな処理がかけ、Routingも簡潔に書けるため
O/R Mapper（RDB）        JOOQ        
構文がSQLに近く直感的
データマッピング関連の処理は自動生成できる
生SQLを書かないため、コンパイルで整合性をチェックできる
SQLでの実行も可能
O/R Mapper（KVS）        Spring Data Redis        
テンプレートエンジン        Thymeleaf        
Lint        ktlint        
Testing FW        JUnit 4 / DBUnit        
モック FW        Mockito / PowerMock        
カバレッジ収集        JaCoCo        
ビルドツール        Gradle        
構成管理ツール        Ansible        
DBマイグレーションツール        MyBatis Migrations        
RDB        MySQL 5.7 / Aurora        
KVS        Redis 3 / ElastiCache        
コンテナ技術        Docker CE        
サーバOS        CentOS 7        慣れていて、環境の準備が容易なため
仮想環境        Vagrant / VirtualBox        


分類        技術名        理由
DBスキーマ可視化        SchemaSpy 5.0.0        
APIドキュメント        Swagger        


ローカル環境
カタログの開発をローカルで行うための環境は、以下のような構成で構築されます。

ローカル環境構成図
XXXXX! > カタログ開発技術情報 > ローカル環境.png

ローカル環境構築手順
仮想環境構築用のリポジトリのdev-serverを利用することで上図の環境を構築することが出来ます。
gitの設定をローカル環境とGitHub Enterprise上で実施後、SSHエージェントにキーを登録し、vagrant upを実行してください。

事前準備
まだ何も環境がない人のみ実施

# gitユーザ情報の登録（やってなければ）
git config --global user.name ユーザ名
git config --global user.email メールアドレス

# ssh-agentの起動(Windowsのみ)
eval `ssh-agent`

# SSH鍵作成（つくってなければ）
ssh-keygen -t rsa -b 4096

GitHub Enterpriseに公開鍵を登録
https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/
開発環境構築
ssh-add
git clone git@github..com:XXXXX/dev-server.git
cd dev-server
vagrant up
※Vagrant 2.0.1だとバグがあるのか、localユーザのタスク実行で失敗するため、以下のコマンドを実行して続きを実施する必要がある。

vagrant reload
vagrant ssh


cd ansible
ansible-playbook -i local local.yml
catalogリポジトリの起動
catalogリポジトリを起動させるまでの手順は以下になります。

最新のdev-serverでprovisionを実施した場合、マイグレーションの実行(migrate up)まで実施されるため、bootRunの実施のみでOKです。

# ホストOS上
cd dev-server/repositories
git clone -b develop git@github..com:XXXXX/catalog.git
git clone -b develop git@github..com:XXXXX/dev-db-migration.git
vagrant ssh

# ゲストOS上
cd repositories/dev-db-migration/catalog
migrate up
cd ../review
migrate up
cd ../store
migrate up

cd ../../catalog
gradle bootRun
フロント開発方法
catalogリポジトリでは、clientディレクトリを利用して、ES2017の仕様を利用したJavaScriptの開発をすることができます。

利用パッケージ
Webpack
Babel
css-loader
style-loader
client利用手順
以下を実行すると、src/main/webapp/js/distディレクトリ配下に、client/src/main.jsをトランスパイルしたbundle.jsが作成されます。

cd client
npm install
npm run build
Windowsの場合、node_modulesディレクトリが共有ディレクトリ配下に出来ると、シンボリックリンクがうまく作成できず
webpackのインストールでエラーになるため、以下をゲストOS上で実行してください。

mkdir ~/catalog_node_modules
sudo mount --bind ~/catalog_node_modules ~/repositories/catalog/client/node_modules
参考：https://medium.com/@dtinth/isolating-node-modules-in-vagrant-9e646067b36
デプロイ関連
Spring Boot Applicationをサービスに登録して、アプリケーションの起動停止を管理します。

https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html#deployment-script-customization-conf-file
起動停止
カタログのアプリケーションは各サーバのアプリケーション起動用ユーザで制御します。

ローカル環境：vagrant
DEV環境：webapp
起動
sudo systemctl start XXXXX-catalog

停止
sudo systemctl stop XXXXX-catalog
ローカル環境で上記を確認する場合は、以下の手順を踏んでください。

dev-server/ansibleのapp/catalogロールを実行
catalogリポジトリをビルド
/home/vagrant/repositoriesディレクトリ配下にbuild/libs配下のXXXXX-catalog.jarをコピー
起動コマンドを実施


 